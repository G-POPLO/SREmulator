using Microsoft.CodeAnalysis;
using SREmulator.SourceGeneration.Receivers;
using System.Collections.Generic;
using System.Text;

namespace SREmulator.SourceGeneration
{
    [Generator(LanguageNames.CSharp)]
    public class SRLightConeEventWarpGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new SRLightConeEventWarpKeysClassReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var receiver = (SRLightConeEventWarpKeysClassReceiver)context.SyntaxContextReceiver;
            var semanticModel = context.Compilation.GetSemanticModel(receiver.Keys.SyntaxTree);
            var keys = Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(semanticModel, receiver.Keys);
            List<(string Key, int Index, int Major, int Minor, string Up5, string Up41, string Up42, string Up43)> warps = new List<(string Key, int Index, int Major, int Minor, string Up5, string Up41, string Up42, string Up43)>();

            foreach (var member in keys.GetMembers())
            {
                var attributeDatas = member.GetAttributes(receiver.Attribute);

                foreach (var attributeData in attributeDatas)
                {
                    string key = (string)attributeData.ConstructorArguments[0].Value;
                    int index = (int)attributeData.ConstructorArguments[1].Value;
                    int major = (int)attributeData.ConstructorArguments[2].Value;
                    int minor = (int)attributeData.ConstructorArguments[3].Value;
                    string up5 = (string)attributeData.ConstructorArguments[4].Value;
                    string up41 = (string)attributeData.ConstructorArguments[5].Value;
                    string up42 = (string)attributeData.ConstructorArguments[6].Value;
                    string up43 = (string)attributeData.ConstructorArguments[7].Value;

                    warps.Add((key, index, major, minor, up5, up41, up42, up43));
                }
            }

            StringBuilder builder = new StringBuilder();
            builder.AppendLine("// <auto-generated/>");
            builder.AppendLine("using SREmulator.SRItems;");
            builder.AppendLine("namespace SREmulator.SRWarps.LightConeEventWarps");
            builder.AppendLine("{");
            builder.AppendLine("    partial class SRLightConeEventWarps");
            builder.AppendLine("    {");
            foreach (var warp in warps)
            {
                builder.AppendLine($"        private static SRLightConeEventWarp _{warp.Key}{warp.Index} = null;");
                builder.AppendLine($"        public static SRLightConeEventWarp {warp.Key}{warp.Index} => _{warp.Key}{warp.Index} ??= new {warp.Key}{warp.Index}();");
            }
            builder.AppendLine("    }");
            builder.AppendLine();

            foreach (var warp in warps)
            {
                builder.AppendLine($"    public sealed class {warp.Key}{warp.Index} : SRLightConeEventWarp");
                builder.AppendLine("    {");
                builder.AppendLine($"        public override SRVersion Version => SRVersion.Ver{warp.Major}p{warp.Minor};");
                builder.AppendLine($"        public override SRStar5LightCone UpStar5LightCone => SRLightCones.{warp.Up5};");
                builder.AppendLine($"        public override SRStar4LightCone UpStar4LightCone1 => SRLightCones.{warp.Up41};");
                builder.AppendLine($"        public override SRStar4LightCone UpStar4LightCone2 => SRLightCones.{warp.Up42};");
                builder.AppendLine($"        public override SRStar4LightCone UpStar4LightCone3 => SRLightCones.{warp.Up43};");
                builder.AppendLine("    }");
                builder.AppendLine();
            }

            builder.AppendLine("}");

            context.AddSource("SRLightConeEventWarps.g.cs", builder.ToString());
        }
    }
}
